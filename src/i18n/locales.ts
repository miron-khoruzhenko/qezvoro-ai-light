// src/i18n/locales.ts

export const locales = [
  { code: 'ru',    name: '–†—É—Å—Å–∫–∏–π',         flag: 'üá∑üá∫' },
  { code: 'en-SG', name: 'English (SG)',    flag: 'üá∏üá¨' },
  { code: 'ms-MY', name: 'Bahasa Melayu',   flag: 'üá≤üáæ' },
  { code: 'es',    name: 'Espa√±ol (ES)',    flag: 'üá™üá∏' },
  { code: 'pt-PT', name: 'Portugu√™s (PT)',  flag: 'üáµüáπ' },
  { code: 'ja',    name: 'Êó•Êú¨Ë™û',            flag: 'üáØüáµ' },
  { code: 'cs',    name: 'ƒåe≈°tina',         flag: 'üá®üáø' },
  { code: 'it-CH', name: 'Italiano (CH)',   flag: 'üá®üá≠' },
  { code: 'fr-CH', name: 'Fran√ßais (CH)',   flag: 'üá®üá≠' },
  { code: 'de-CH', name: 'Deutsch (CH)',    flag: 'üá®üá≠' },
] as const;

export type Locale = typeof locales[number]['code'];

export const localeCodes = locales.map(l => l.code) as readonly Locale[];

export const defaultLocale: Locale = 'ru';
export const isLocale = (l: string): l is Locale =>
  (localeCodes as readonly string[]).includes(l);

export const isRtl = (_l: string) => false; // —Å—Ä–µ–¥–∏ —ç—Ç–∏—Ö –ª–æ–∫–∞–ª–µ–π RTL –Ω–µ—Ç

// –ë—ã–ª–æ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º lib/i18n.ts ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—é–¥–∞:
export function withLocale(locale: string, href: string) {
  if (!href || href.startsWith("#")) return href;                                  // —è–∫–æ—Ä—å ‚Äî –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
  if (href.startsWith(`/${locale}/`) || href === `/${locale}`) return href;        // —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
  if (/^https?:\/\//i.test(href)) return href;                                     // –≤–Ω–µ—à–Ω–∏–π URL
  return href.startsWith("/") ? `/${locale}${href}` : `/${locale}/${href}`;        // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ/–∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ
}
